[project]
name = "transmission-clutch"
version = "7.0.2"
description = "An RPC client library for the Transmission BitTorrent client"
authors = [
    { name = "Michael Hadam", email = "michael@hadam.us" }
]
maintainers = [
    { name = "Michael Hadam", email = "michael@hadam.us" }
]
readme = "README.rst"
license = "MIT"
license-files = ["LICEN[CS]E*"]
packages = [{ include = "clutch" }]
requires-python = ">=3.10"
dependencies = [
    "requests~=2.32",
    "pydantic~=2.10"
]

[project.urls]
Documentation = "https://clutch.readthedocs.io/en/latest/"
Repository = "https://github.com/mhadam/clutch"
Issues = "https://github.com/mhadam/clutch/issues"

[dependency-groups]
test = [
    "pytest-httpserver>=1.1.0",
    "pytest~=8.3",
    "deepdiff>=8.1.1",
    "dirty-equals>=0.9.0",
]
dev = [
    "ruff",
    "mypy",
    "hatchling>=1.27.0",
    "tomlscript",
    "types-requests>=2.32.0.20241016",
]
docs = [
    "pydantic",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-autobuild",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["clutch"]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
target-version = "py310"
lint.extend-select = ["RUF013", "F401"]
extend-include = ["clutch/", "tests/"]

[tool.mypy]
plugins = ["pydantic.mypy"]

[tool.tomlscript]
docs-autodoc = "uv run sphinx-apidoc -o source/ ../clutch"
docs-autogen = "uv run sphinx-autogen source/index.rst -o source/"
docs-reqs = "uv export --only-group=docs --no-hashes | awk '{print $1}' FS=' ;' > docs/requirements.txt"
mypy = "uv run mypy clutch/ tests/"
ruff = "ruff format"
unit = """
docker build -f docker/clutch.df -t clutch-test .
docker run --rm --entrypoint "/bin/sh" clutch-test -c "mypy .; pytest tests/unit"
"""
docs-gen = "uv run sphinx-autogen docs/index.rst -o docs/"
docs-live = "uv run sphinx-autobuild docs docs/_build/html"
clean-containers = """
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
"""
integration-shell = """
docker-compose -f ./docker/docker-compose.yml up -d --force-recreate --no-deps --build testbed transmission
docker-compose -f ./docker/docker-compose.yml run --rm start_dependencies
docker-compose -f ./docker/docker-compose.yml run --rm testbed sh -c "python -i client_setup.py"
"""
end-to-end = """
docker-compose -f ./docker/docker-compose.yml up -d --force-recreate --no-deps --build testbed transmission
docker-compose -f ./docker/docker-compose.yml run --rm start_dependencies
docker-compose -f ./docker/docker-compose.yml run --rm testbed sh -c "pytest tests/endtoend"
"""
